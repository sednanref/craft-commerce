Shipping:

Shipping methods (which have conditions based in rules, i.e. shipping zone, costs, etc)

Shipping zones: to add into the shipping method's conditions.

PAYMENTS: 
 For payments you have to add a gateway in:

Commerce->SystemSettings->Gateways

There is a plugin for payment method's gateway called "Stripe"

* ORDERS Status

In order to change the order statuses, you must go to
Commerce->SystemSettings->OrderStatuses

Some examples:
	- processing
	- Fullfilled
	- Shipped
	- Exception

* Email setup to send success order or any other action in commerce

Commerce->SystemSettings->Emails

you can create emails with templates from there

and then in the panel control view for an order, you can send the emails.

make sure you have the correct email settings in 
Settings->email (in my case I used Gmail as transport type), to allow this you have to allow other "insecure" apps to have access to your google account, to do so go to you "manage google account"->security and activate it, it is recommended to use it only when testing this feature and then restrict the access to your google account once you are done!

To send based on certain actions:

Commerce->SystemSettings->OrderStatuses-><Some Status> -> StatusEmail and select! 

PROMOTIONS

Commerce -> promotions

You have:
	Discounts & Sales

Sales are promotions applied to products before they are added to the cart, Discounts are discounts depending on some actions like coupons!

TAXES:

There are 3 different types of configurable taxes in craft:

- Tax Rates
- Tax Categories
- Tax Zones: can be scoped on countries, states (US) or ZIP Codes.


==================
    PLUGINS
==================

* In order to create a new plugin, create a new folder plugins and inside of it create the plugin "craft-plugin-name"
'craft-' is only by convention, then you create the composer.json of the plugin and add it in the repositories of the
project's composer.json.
* then you can do `composer require <plugin-name>` (plugin name is sednanref/user-guide in this example)
* for the icons you just need an icon.svg and an icon-mask.svg in the src folder of your plugin.

There is a great video about how to be more efficient using phpStorm called
Be Awesome in PhpStorm from Laracast

there is a nice repo on github craftcms/phpstorm-settings

==============
DYNAMIC ROUTES
==============

Specified in CP.
Map a URI to a specific template but without naming convention
Great for date-based archives pages.
====
TWIG
====
* loops in twig:

loop.first -> true if it is the first iteration
loop.index
loop.index0
loop.revindex
loop.last -> true if it is the last iteration
loop.length -> gives the total number of iterations in the loop

multiple assignment is possible
{% set a, b, c = 'a', 'b', 'c' %}

also possible to create formatted text as variable:
{% set description_formatted %}
    <p class="description" style="color: red;"> Learn more abour Crafty Coffee and our company and people.</p>
{% endset %}
{{ description_formatted }}

* Extend templates always relative to the templates folder:
    {% extends '_layouts/main' %}

    {% block content %}
        some overwrite of the main base template in the block "content"
    {% endblock %}

* when you don't define a block in your child template, it will take whatever is inside
  of the base template in the defined block.
* you can also use the parent's block and add stuff to it like:
    {% block title %}
        {{ parent() | some awesome subtitle }}
    {% endblock %}

Sharing templates:

Includes Tags!
{% include '_inc/sidebar' %}

Embed Tags are kind of an hybrid of extends and include:
{% embed "social"%}
    {% block title %} We're Socially Distancing {% endblock %}
{% endembed %}

where "social" is a template with a title block.

Filters:

Allow you to alter the content that you want to add in your template.

{{ variable | filter }}
-
{{ pageTitle | title }} -> title case
{{ pageTitle | trim }} -> trim the string
{{ pageTitle | trim('.') }} -> trim all the points
{{ pageTitle | trim('.') | title }} -> trims and title case.

MACROS:

create:
{% macro macroName(arg1, arg2) %}
    {# contents of macro here #}
{% endmacro %}


{% macro socialList(networks, className) %}
    <ul {% if className %} class="{{ className }}"{%endif%}>
    {% for network in networks %}
        <li class="{{network.name | lower }}"><a href="{{ network.url }}">
            {{ network.name }}</a></li>
    {% endfor %}
    </ul>
{% endmacro %}

-----
Import and use:

{% set networks = {
    twitter: { name: "Twitter", url: "https://twitter.com" },
    facebook: { name: "Facebook", url: "https://facebook.com" },
    instagram: { name: "Instagram", url: "https://instagram.com" }
    }
%}

{% import '_macros/socialList' as socialList %}

{{ socialList.socialList(networks, 'coffee') }}
